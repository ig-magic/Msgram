name: Build and Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        cache-dependency-path: '**/pnpm-lock.yaml'
    
    - name: Install dependencies
      run: pnpm install
      id: install
      continue-on-error: true

    - name: Retry Install on Failure
      if: steps.install.outcome == 'failure'
      run: |
        rm -rf node_modules
        pnpm install --no-frozen-lockfile
      
    - name: Build
      run: pnpm build
      id: build
      
    - name: Setup Pages
      if: success() && github.event_name != 'pull_request'
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      if: success() && github.event_name != 'pull_request'
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist
        
    - name: Report Build Status
      if: always()
      run: |
        if [ "${{ steps.build.outcome }}" == "success" ]; then
          echo "‚úÖ Build completed successfully"
        else
          echo "‚ùå Build failed"
          exit 1
        fi

  deploy:
    if: github.event_name != 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Report Deployment Status
        if: always()
        run: |
          if [ "${{ steps.deployment.outcome }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully"
            echo "üåê Site is live at: ${{ steps.deployment.outputs.page_url }}"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi 